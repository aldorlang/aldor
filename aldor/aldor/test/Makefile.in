# ..From autoconf
@SET_MAKE@

# For AM_V_*
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@

VPATH = @srcdir@
abs_top_builddir = @abs_top_builddir@
srcdir = @srcdir@
abs_srcdir = @abs_srcdir@
top_builddir = @top_builddir@
builddir = @builddir@
top_srcdir = @top_srcdir@
abs_top_srcdir = @abs_top_srcdir@
subdir = aldor/test
JUNIT_JAR = @JUNIT_JAR@

include $(top_srcdir)/mk/step.mk
include $(top_builddir)/lib/config.mk

$(call am_define_steps,\
    ALDOR ALDOR_AP ALDOR_CMD ALDOR_EXE ALDOR_FM ALDOR_GENC \
    ALDOR_JAVATEST ALDOR_OBJ JAVAC ALDOR_JAVA JAVA_CP JUNIT CLEANONE)

all: really-all

.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ '; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ ;; \
	esac;

AM_DBG := $(if $(filter 1,$(DBG)), gdb --args, $(DBG))
AM_DBG_J := $(if $(filter 1,$(DBG_J)), gdb --args, $(DBG_J))
AM_DBG_C := $(if $(filter 1,$(DBG_C)), gdb --args, $(DBG_C))
AM_DBG_FM := $(if $(filter 1,$(DBG_FM)), gdb --args, $(DBG_FM))

aldorsrcdir   = $(abs_top_srcdir)/aldor/src
aldorexedir   = $(abs_top_builddir)/aldor/src
aldortooldir  = $(abs_top_builddir)/aldor/subcmd/unitools
foamsrclibdir = $(abs_top_srcdir)/aldor/lib/libfoamlib
foamlibdir    = $(abs_top_builddir)/aldor/lib/libfoamlib
foamsrcdir    = $(abs_top_srcdir)/aldor/lib/libfoam
foamdir       = $(abs_top_builddir)/aldor/lib/libfoam

utils := tassert rtexns
aptests := exquo

fmtests := x rectest enumtest clos strtable1 simple apply \
           nestcond silly cexp lself0 selfcond lself \
	   lself2 catdef2 args1a args1 args2a args2 \
	   strtable1 rec2 lit gener0 gener_fns gtools xarr \
	   xdom
ctests  := rectest enumtest multinever maptuple cimp1 \
           gener0 xit xits xiter lit xarr
otests  := enumtest rec2
xtests := enumtest jimport cross seq small lit xit xits xiter generlist xmap xfold genrec

jtests := simple_j enumtest run_j halt gener0 xit xiter
junittests := JExportTest JThrowTest
jruntests := small jimport jimport_opt jimp0 jimp1 jlist jexport jexport1 jexport2 \
	     envname jexn jthrow xiter xit genlist0a genlist1a gencross0 gencross1 \
	     xgenerpkg0 xgenerpkg1 xmap where1 xdom gdom xfold gencross_empty genrec

out/ao/lself.ao: out/ao/lself0.ao
out/ao/lself2.ao: out/ao/lself0.ao

out/ao/args1.ao: out/ao/args1a.ao
out/ao/args2.ao: out/ao/args2a.ao

out/ao/xlist.ao: out/ao/x.ao
out/ao/gener.ao: out/ao/x.ao
out/ao/gener0.ao: out/ao/x.ao
out/ao/generlist.ao: out/ao/x.ao
out/ao/generlist1.ao: out/ao/x.ao
out/ao/gener_fns.ao: out/ao/x.ao
out/ao/gencross0.ao: out/ao/x.ao
out/ao/gencross1.ao: out/ao/x.ao
out/ao/gencross1a.ao: out/ao/x.ao
out/ao/gtools.ao: out/ao/x.ao
out/ao/genrec.ao: out/ao/x.ao
out/ao/xit.ao: out/ao/x.ao
out/ao/xits.ao: out/ao/x.ao
out/ao/xmap.ao: out/ao/x.ao
out/ao/xdom.ao: out/ao/x.ao
out/ao/xfold.ao: out/ao/x.ao
out/ao/xgenerpkg0.ao: out/ao/x.ao
out/ao/xgenerpkg1.ao: out/ao/x.ao
out/ao/selfcond.ao: out/ao/lself0.ao

out/ao/generlist1.ao: generlist.as
out/ao/genlist1a.ao: genlist0a.as

out/ao/xgenerpkg0.ao: xgenerpkg.as
out/ao/xgenerpkg1.ao: xgenerpkg.as

c_AXLFLAGS=-Q3
cimp1_AXLFLAGS=-Q3
simple_j_AXLFLAGS=-Q2
jimport_opt_AXLFLAGS=-Q9 -Qinline-all
xarr_opts = -Q9 -Qinline-all
xfold_opts = -Q3

#badtests := opt1 jcatch fcall
badtests := jcatch fcall

#xarr_opts += -WD+crin -WD+optf -WD+inlProg -WD+inlCallInfo

jimport_opts := -Q3
jthrow_opts := -Q3
halt_opts := -Q3
jlist_opts :=

lself_opts = -Y out/ao
lself2_opts = -Y out/ao
args1_opts = -Y out/ao
args2_opts = -Y out/ao

gx_opts += -Q3
gener1a_opts += -Q3
xm1_opts += -Q3
xn1_opts += -Q3
xit_opts += -Q3
xits_opts += -Q3
xiter_opts += -Q3
xgenerpkg_opts += -Q3
xmap_opts += -Q8
xdom_opts += -Q3
gdom_opts += -Q3
lit_opts += -Q3

jexport_extjava := aldor.stuff.Foo aldor.stuff.Bar
jthrow_extjava  := aldor.stuff.ExnThrow
envname_extjava := aldor.stuff.Env
jlist_extjava   := aldor.stuff.Singleton
jexn_srcjava    := aldor.test.ExceptionExample
JExportTest_classes := aldorcode.jexport
JThrowTest_classes  := aldorcode.jthrow

jimport_opt.ao: $(srcdir)/jimport.as

# opt1 fails because the optimise decides to inline the recursive call
# (it shouldn't, but spotting the call is a bit tricky).

opt1_AXLFLAGS=-Y$(foamdir)/al -I $(foamsrcdir)/al -lRuntimeLib=foam -Q9
strtable1_AXLFLAGS=-Y$(foamdir)/al -I $(foamsrcdir)/al -lRuntimeLib=foam -Q9
clos_AXLFLAGS := -Q2
simple_AXLFLAGS=-O
multinever_AXLFLAGS = -Q9
args1_AXLFLAGS =
args2_AXLFLAGS =

_aptests := $(sort $(aptests))
_jruntests  := $(if $(BUILD_JAVA), $(sort $(jruntests)),)
_junittests := $(if $(HAS_JUNIT), $(sort $(junittests)),)
_jtests     := $(if $(BUILD_JAVA), $(sort $(jtests) $(_jruntests)),)
_xtests     := $(sort $(xtests))
_otests     := $(sort $(otests) $(_xtests))
_ctests     := $(sort $(ctests) $(_otests))
_fmtests    := $(sort $(fmtests) $(_jtests) $(_ctests))
_aotests    := $(sort $(_fmtests) $(_ctests) $(_xtests))
_alltests   := $(sort $(_aptests) $(_fmtests) $(_ctests) $(_otests) $(_xtests) $(_jtests))

nfile := -Nfile=$(aldorsrcdir)/aldor.conf

.PHONY: all-fm
all-fm: $(patsubst %, out/fm/%.fm, $(utils) $(_fmtests))

$(patsubst %, out/fm/%.fm, $(utils) $(_fmtests)): out/fm/%.fm: out/ao/%.ao
	$(AM_V_ALDOR_FM)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG_FM) $(aldorexedir)/aldor $(nfile) -Ffm=$(builddir)/$@ $<

$(patsubst %, out/c/%.c, $(utils) $(_ctests)): out/c/%.c: out/ao/%.ao
	$(AM_V_ALDOR_GENC)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG_C) $(aldorexedir)/aldor $(nfile) -Fc=$(builddir)/$@ $<

$(patsubst %, out/java/aldorcode/%.java, $(utils) $(_jtests)): out/java/aldorcode/%.java: out/fm/%.fm
	$(AM_V_ALDOR_JAVA)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG_J) $(aldorexedir)/aldor \
                -Wcheck $(nfile) 	 \
		$(if $(filter $(_jruntests), $*), -Jmain,) \
		-Fjava=$(builddir)/out/java/$*.java $<

$(patsubst %, %-javatest, $(_jtests)): out/java/aldorcode/tassert.class
$(patsubst %, out/ao/%.ao, $(_aotests)): out/ao/tassert.ao

javaopts=-cp $(abs_top_builddir)/aldor/lib/java/src/foamj.jar

define java_import_dependency_template
out/java/aldorcode/$1.class: $(patsubst %,out/java/%.java,$(subst .,/,$($(1)_srcjava)))
$(1)_srcjava:
	echo $(1) $($(1)-srcjava) $(patsubst %,out/java/%.java,$(subst .,/,$($(1)_srcjava)))
endef

define junit_class_dependency_template
out/java/$1.class: $(patsubst %,out/java/%.class,$(subst .,/,$($(1)_classes)))
endef

$(foreach jtest,$(utils) $(_jtests), $(eval $(call java_import_dependency_template,$(jtest))))
$(foreach junit,$(_junittests), $(eval $(call junit_class_dependency_template,$(junit))))

allsrcjava := $(foreach jtest,$(_jtests),$(patsubst %,out/java/%.java,$(subst .,/,$($(jtest)_srcjava))))

$(allsrcjava): out/java/%.java: $(srcdir)/%.java
	$(AM_V_JAVA_CP) \
	(mkdir -p $(dir $@); cp $(srcdir)/$*.java $@)

$(patsubst %, out/java/aldorcode/%.class, $(utils) $(_jtests)): out/java/aldorcode/%.class: out/java/aldorcode/%.java
	$(AM_V_JAVAC) \
	(mkdir -p $$(dirname $@); cd $(builddir)/out/java;  \
	 javac $(javaopts) aldorcode/$*.java \
			   $(addsuffix .java,$(subst .,/,$($*_extjava) $($*_srcjava))) \
	)

# Create .o files locally as unicl creates files in the
# current directory...
$(patsubst %, %.o, $(utils) $(_otests)): %.o: out/ao/%.ao
	$(AM_V_ALDOR_OBJ)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG) $(aldorexedir)/aldor $(nfile) 	\
			      -Ccc=$(aldortooldir)/unicl \
			      -Cargs="-Wconfig=$(aldorsrcdir)/aldor.conf $(UNICLFLAGS) -I$(aldorsrcdir)" \
			      -Fo=$(builddir)/$@ $<

$(patsubst %, out/ap/%.ap, $(_aptests)): out/ap/%.ap: $(srcdir)/%.as
	$(AM_V_ALDOR_AP)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG) $(aldorexedir)/aldor $(nfile) -I$(foamsrclibdir)/al \
			      -Fap=$(builddir)/$@ $<

define aldor_args
	$(nfile) 		\
	-Wcheck			\
	-Y$(foamlibdir)/al	\
	-Y out/ao		\
	-I$(foamsrclibdir)/al	\
	-lAxlLib=foamlib 		\
	$(AXLFLAGS) $($*_AXLFLAGS)	\
	-Fao=out/ao/$*.ao $(srcdir)/$*.as
endef

.PHONY: all-ap
all-ap: $(patsubst %, out/ao/%.ap, $(_aotests))
$(patsubst %, out/ap/%.ap, $(_aotests)): out/ap/%.ap: %.as
	$(AM_V_ALDOR_AP)		\
	mkdir -p $$(dirname $@);	\
	$(aldorexedir)/aldor $(nfile) -Fap=$@ $(srcdir)/$*.as

.PHONY: all-ao
all-ao: $(patsubst %, out/ao/%.ao, $(_aotests))
$(patsubst %, out/ao/%.ao, $(utils) $(_aotests)): $(aldorexedir)/aldor
$(patsubst %, out/ao/%.ao, $(utils) $(_aotests)): out/ao/%.ao: %.as
	$(AM_V_ALDOR)			\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG) $(aldorexedir)/aldor $($*_opts) $(aldor_args)

$(patsubst %, out/ao/%.cmd, $(_aotests)): out/ao/%.cmd: %.as
	$(AM_V_ALDOR_CMD)	 \
	mkdir -p $$(dirname $@); \
	echo run '$(aldor_args)' > $@

.PHONY: all-exe
all-exe: $(patsubst %, %.exe, $(_xtests))
$(patsubst %, %.exe, $(_xtests)): %.exe: %.o rtexns.o tassert.o
	$(AM_V_ALDOR_EXE)				\
	rm -f $@;					\
	$(AM_DBG) $(aldorexedir)/aldor $(nfile) 	\
		      -Ccc=$(aldortooldir)/unicl	\
		      -Y$(foamdir)			\
		      -Y$(foamlibdir)			\
		      -Lfoamlib				\
		      -Cargs="-Wconfig=$(aldorsrcdir)/aldor.conf -I$(aldorsrcdir) $(UNICLFLAGS)" \
		      -Fx=$@ out/ao/$*.ao rtexns.o tassert.o

#		      -Fmain=bobthebuilder.c		\

classpath=$(abs_top_builddir)/aldor/lib/java/src/foamj.jar:$(abs_top_builddir)/aldor/lib/libfoam/al/foam.jar:$(abs_top_builddir)/aldor/lib/libfoamlib/al/foamlib.jar
$(patsubst %, %-javatest,$(_jruntests)): %-javatest: out/java/aldorcode/%.class
	$(AM_V_ALDOR_JAVATEST) java -cp out/java:$(classpath) aldorcode.$*

$(patsubst %,out/java/%.class,$(_junittests)): out/java/%.class: %.java
	(mkdir -p $$(dirname $@); \
	 cd $(builddir)/out/java; \
         javac -d . -cp $(classpath)/../src/foamj.jar:$(JUNIT_JAR):. \
		$(abs_srcdir)/$*.java)

.PHONY: $(addsuffix -junittest,$(_junittests))

$(addsuffix -junittest,$(_junittests)): %-junittest: out/java/%.class
	$(AM_V_JUNIT) \
	java -cp $(classpath):$(JUNIT_JAR):out/java \
	         org.junit.runner.JUnitCore $*

check-java: $(patsubst %,%-javatest,$(_jruntests)) $(patsubst %,%-junittest,$(_junittests))

$(addsuffix -xtest,$(_xtests)): %-xtest: %.exe
	$(AM_V_ALDOR_EXE) ./$*.exe

check-xest: $(patsubst %,%-xtest,$(_xtests))

define all_template
all-$(1): $(patsubst %, out/ao/%.ao, $(filter $(1), $(_aotests)))
all-$(1): $(patsubst %, out/fm/%.fm, $(filter $(1), $(_fmtests)))
all-$(1): $(patsubst %, out/c/%.c, $(filter $(1), $(_ctests)))
all-$(1): $(patsubst %, out/java/aldorcode/%.java, $(filter $(1), $(_jtests)))
endef

define check_template
check-$(1): $(patsubst %, %-javatest,  $(filter $(1), $(_jruntests)))
check-$(1): $(patsubst %, %-junittest, $(filter $(1), $(_junittests)))
check-$(1): $(patsubst %, %-xtest,     $(filter $(1), $(_xtests)))
endef

define clean_template
clean-$(1):
	$(call AM_P_CLEANONE, $(1)) \
	for ii in $(patsubst %, out/ao/%.ao, $(filter $(1), $(_aotests))) 	\
		  $(patsubst %, out/ao/%.ao, $(filter $(1), $(_aotests)))	\
		  $(patsubst %, out/fm/%.fm, $(filter $(1), $(_fmtests)))	\
		  $(patsubst %, out/c/%.c,   $(filter $(1), $(_ctests)))	\
		  $(patsubst %, %.exe,       $(filter $(1), $(_xtests)))	\
		  $(patsubst %, out/java/aldorcode/%.java, $(filter $(1), $(_jtests))); do \
		rm -f $$$$ii; \
	done
.PHONY: clean-$(1)
endef

$(foreach test, $(_alltests), $(eval $(call all_template,  $(test))))
$(foreach test, $(_alltests), $(eval $(call check_template,$(test))))
$(foreach test, $(_alltests), $(eval $(call clean_template,$(test))))

.PHONY: check-java
check: check-java

really-all: \
     $(patsubst %,out/ap/%.ap,$(_aptests)) \
     $(patsubst %,out/ao/%.cmd,$(_aotests)) \
     $(patsubst %,out/fm/%.fm,$(_fmtests)) \
     $(patsubst %,out/c/%.c,$(_ctests)) \
     $(patsubst %,out/java/aldorcode/%.java,$(_jtests)) \
     $(patsubst %,out/java/aldorcode/%.class,$(_jtests)) \
     $(patsubst %,out/java/aldorcode/%.class,$(_jruntests)) \
     $(patsubst %,%.o,$(_otests))  \
     $(patsubst %,%.exe,$(_xtests))

.PHONY: all

# Check each target is buildable standalone
check-makefile:
	set -e; for i in $(_alltests); do make clean && make all-$$i; done

# Check all files are in git
all-check-source: $(patsubst %,check-source-%, $(utils) $(_aotests))
$(patsubst %,check-source-%, $(utils) $(_aotests)): check-source-%:
	@(cd $(srcdir); git ls-files --error-unmatch $*.as)


releasecheck: all-check-source check-makefile

#
# :: Automake requires this little lot
#
mostlyclean:
	rm -rf $(builddir)/out
	rm -f $(patsubst %,%.o,$(utils) $(_otests))
	rm -f $(patsubst %,%.exe,$(_xtests))
clean: mostlyclean

distclean: clean
	rm Makefile

maintainer-clean: distclean


EMPTY_AUTOMAKE_TARGETS  = dvi pdf ps info html tags ctags
EMPTY_AUTOMAKE_TARGETS += install install-data install-exec uninstall
EMPTY_AUTOMAKE_TARGETS += install-dvi install-html install-info install-ps install-pdf
EMPTY_AUTOMAKE_TARGETS += installdirs
EMPTY_AUTOMAKE_TARGETS += check installcheck

.PHONY: $(EMPTY_AUTOMAKE_TARGETS)
$(EMPTY_AUTOMAKE_TARGETS):
