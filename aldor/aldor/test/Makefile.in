# ..From autoconf
@SET_MAKE@

# For AM_V_*
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@

VPATH = @srcdir@
abs_top_builddir = @abs_top_builddir@
srcdir = @srcdir@
abs_srcdir = @abs_srcdir@
top_builddir = @top_builddir@
builddir = @builddir@
abs_top_srcdir = @abs_top_srcdir@
subdir = aldor/test
JUNIT_JAR = @JUNIT_JAR@

define am_silent_template
AM_V_$(1)    = $$(am__v_$(1)_$$(V))
am__v_$(1)_  = $$(am__v_$(1)_$$(AM_DEFAULT_VERBOSITY))
am__v_$(1)_0 = @echo "  $(subst _,-,$(1))   " $$@;
endef

STEPS := ALDOR ALDOR_AP ALDOR_CMD ALDOR_EXE ALDOR_FM ALDOR_GENC		\
	 ALDOR_JAVATEST ALDOR_OBJ JAVAC ALDOR_JAVA JAVA_CP JUNIT

$(foreach rule,$(STEPS),$(eval $(call am_silent_template,$(rule))))

all: really-all

.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ '; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ ;; \
	esac;

AM_DBG := $(if $(filter 1,$(DBG)), gdb --args, $(DBG))
AM_DBG_J := $(if $(filter 1,$(DBG_J)), gdb --args, $(DBG_J))
AM_DBG_C := $(if $(filter 1,$(DBG_C)), gdb --args, $(DBG_C))

aldorsrcdir = $(abs_top_srcdir)/aldor/src
aldorexedir = $(abs_top_builddir)/aldor/src
aldortooldir = $(abs_top_builddir)/aldor/subcmd/unitools
foamsrclibdir = $(abs_top_srcdir)/aldor/lib/libfoamlib
foamlibdir = $(abs_top_builddir)/aldor/lib/libfoamlib
foamsrcdir = $(abs_top_srcdir)/aldor/lib/libfoam
foamdir = $(abs_top_builddir)/aldor/lib/libfoam

aptests := exquo
fmtests := rectest enumtest clos strtable1 simple apply nestcond silly
ctests  := rectest enumtest multinever maptuple
otests  := enumtest
xtests := enumtest jimport cross

@BUILD_JAVA_TRUE@jtests := simple_j enumtest run_j halt
@HAS_JUNIT_TRUE@junittests := JExportTest JThrowTest
@BUILD_JAVA_TRUE@jruntests := jimport jimport_opt jimp0 jlist jexport jexport1 jexport2 envname jexn jthrow

x_extra := rtexns

simple_j_AXLFLAGS=-Q2
jimport_opt_AXLFLAGS=-Q9 -Qinline-all

badtests := opt1 jcatch

jimport_opts := -Q3
jthrow_opts := -Q3
halt_opts := -Q3
jlist_opts :=

jexport_extjava := aldor.stuff.Foo aldor.stuff.Bar
jthrow_extjava  := aldor.stuff.ExnThrow
envname_extjava := aldor.stuff.Env
jlist_extjava   := aldor.stuff.Singleton
jexn_srcjava    := aldor.test.ExceptionExample
JExportTest_classes := aldorcode.jexport
JThrowTest_classes  := aldorcode.jthrow

jimport_opt.ao: $(srcdir)/jimport.as

# opt1 fails because the optimise decides to inline the recursive call
# (it shouldn't, but spotting the call is a bit tricky).

opt1_AXLFLAGS=-Y$(foamdir)/al -I $(foamsrcdir)/al -lRuntimeLib=foam -Q9
strtable1_AXLFLAGS=-Y$(foamdir)/al -I $(foamsrcdir)/al -lRuntimeLib=foam -Q9
clos_AXLFLAGS := -Q2
simple_AXLFLAGS=-O
multinever_AXLFLAGS = -Q9

_aptests := $(sort $(aptests))
_ctests  := $(sort $(ctests)  $(otests))

_jruntests := $(sort $(jruntests))
_junittests := $(sort $(junittests))
_jtests  := $(sort $(jtests) $(_jruntests))
_xtests  := $(sort $(xtests))
_fmtests := $(sort $(fmtests) $(_jtests) $(_ctests))
_otests  := $(sort $(otests) $(x_extra) $(_xtests))
_ctests  := $(sort $(ctests)  $(_otests))
_aotests := $(sort $(_fmtests) $(_ctests) $(_xtests))

nfile := -Nfile=$(aldorsrcdir)/aldor.conf

$(patsubst %, out/fm/%.fm, $(_fmtests)): out/fm/%.fm: out/ao/%.ao
	$(AM_V_ALDOR_FM)		\
	mkdir -p $$(dirname $@);	\
	$(aldorexedir)/aldor $(nfile) -Ffm=$(builddir)/$@ $<

$(patsubst %, out/c/%.c, $(_ctests)): out/c/%.c: out/ao/%.ao
	$(AM_V_ALDOR_GENC)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG_C) $(aldorexedir)/aldor $(nfile) -Fc=$(builddir)/$@ $<

$(patsubst %, out/java/aldorcode/%.java, $(_jtests)): out/java/aldorcode/%.java: out/fm/%.fm
	$(AM_V_ALDOR_JAVA)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG_J) $(aldorexedir)/aldor $(nfile) \
		$(if $(filter $(_jruntests), $*), -Jmain,) \
		-Fjava=$(builddir)/out/java/$*.java $<

javaopts=-cp $(abs_top_builddir)/aldor/lib/java/src/foamj.jar

define java_import_dependency_template
out/java/aldorcode/$1.class: $(patsubst %,out/java/%.java,$(subst .,/,$($(1)_srcjava)))
$(1)_srcjava:
	echo $(1) $($(1)_srcjava) $(patsubst %,out/java/%.java,$(subst .,/,$($(1)_srcjava)))
endef

define junit_class_dependency_template
out/java/aldorcode/$1.class: $(patsubst %,out/java/aldorcode/%.java,$(subst .,/,$($(1)_classes)))
endef

$(foreach jtest,$(_jtests), $(eval $(call java_import_dependency_template,$(jtest))))
$(foreach junit,$(_junittests), $(eval $(call junit_class_dependency_template,$(junit))))

allsrcjava := $(foreach jtest,$(_jtests),$(patsubst %,out/java/%.java,$(subst .,/,$($(jtest)_srcjava))))

$(allsrcjava): out/java/%.java: $(srcdir)/%.java
	$(AM_V_JAVA_CP) \
	(mkdir -p $(dir $@); cp $(srcdir)/$*.java $@)

$(patsubst %, out/java/aldorcode/%.class, $(_jtests)): out/java/aldorcode/%.class: out/java/aldorcode/%.java
	$(AM_V_JAVAC) \
	(cd $(builddir)/out/java;  \
	 javac $(javaopts) aldorcode/$*.java \
			   $(addsuffix .java,$(subst .,/,$($*_extjava) $($*_srcjava))) \
	)

# Create .o files locally as unicl creates files in the
# current directory...
$(patsubst %, %.o, $(_otests)): %.o: out/ao/%.ao
	$(AM_V_ALDOR_OBJ)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG) $(aldorexedir)/aldor $(nfile) 	\
			      -Ccc=$(aldortooldir)/unicl	\
			      -Cargs="-Wconfig=$(aldorsrcdir)/aldor.conf $(UNICLFLAGS) -I$(aldorsrcdir)" \
			      -Fo=$(builddir)/$@ $<

$(patsubst %, out/ap/%.ap, $(_aptests)): out/ap/%.ap: $(srcdir)/%.as
	$(AM_V_ALDOR_AP)		\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG) $(aldorexedir)/aldor $(nfile) -I$(foamsrclibdir)/al \
			      -Fap=$(builddir)/$@ $<

define aldor_args
	$(nfile) 		\
	-Wcheck			\
	-Y$(foamlibdir)/al	\
	-I$(foamsrclibdir)/al	\
	-lAxlLib=foamlib 		\
	$(AXLFLAGS) $($*_AXLFLAGS)	\
	-Fao=out/ao/$*.ao $(srcdir)/$*.as
endef

$(patsubst %, out/ap/%.ap, $(_aotests)): out/ap/%.ap: %.as
	$(AM_V_ALDOR_AP)		\
	mkdir -p $$(dirname $@);	\
	$(aldorexedir)/aldor $(nfile) -Fap=$@ $(srcdir)/$*.as

$(patsubst %, out/ao/%.ao, $(_aotests)): $(aldorexedir)/aldor
$(patsubst %, out/ao/%.ao, $(_aotests)): out/ao/%.ao: %.as
	$(AM_V_ALDOR)			\
	mkdir -p $$(dirname $@);	\
	$(AM_DBG) $(aldorexedir)/aldor $($*_opts) $(aldor_args)

$(patsubst %, out/ao/%.cmd, $(_aotests)): out/ao/%.cmd: %.as
	$(AM_V_ALDOR_CMD)	 \
	mkdir -p $$(dirname $@); \
	echo run '$(aldor_args)' > $@

$(patsubst %, %.exe, $(_xtests)): %.exe: %.o rtexns.o
	$(AM_V_ALDOR_EXE)				\
	rm -f $@;					\
	$(AM_DBG) $(aldorexedir)/aldor $(nfile) 	\
		      -Ccc=$(aldortooldir)/unicl	\
		      -Y$(foamdir)			\
		      -Y$(foamlibdir)			\
		      -Lfoamlib				\
		      -Cargs="-Wconfig=$(aldorsrcdir)/aldor.conf -I$(aldorsrcdir) $(UNICLFLAGS)" \
		      -Fx=$@ out/ao/$*.ao rtexns.o

#		      -Fmain=bobthebuilder.c		\

classpath=$(abs_top_builddir)/aldor/lib/java/src/foamj.jar:$(abs_top_builddir)/aldor/lib/libfoam/al/foam.jar:$(abs_top_builddir)/aldor/lib/libfoamlib/al/foamlib.jar
$(patsubst %, %-javatest,$(_jruntests)): %-javatest: out/java/aldorcode/%.class
	$(AM_V_ALDOR_JAVATEST) java -cp out/java:$(classpath) aldorcode.$*

$(patsubst %,out/java/%.class,$(_junittests)):  out/java/%.class: %.java
	(cd $(builddir)/out/java; \
         javac -d . -cp $(classpath)/../src/foamj.jar:$(JUNIT_JAR):. \
		$(abs_srcdir)/$*.java)

.PHONY: $(addsuffix -junittest,$(_junittests))

$(addsuffix -junittest,$(_junittests)): %-junittest: out/java/%.class
	$(AM_V_JUNIT) \
	java -cp $(classpath):$(JUNIT_JAR):out/java \
	         org.junit.runner.JUnitCore $*

check-java: $(patsubst %,%-javatest,$(_jruntests)) $(patsubst %,%-junittest,$(_junittests))

.PHONY: check-java

check: check-java

really-all: \
     $(patsubst %,out/ap/%.ap,$(_aptests)) \
     $(patsubst %,out/ao/%.cmd,$(_aotests)) \
     $(patsubst %,out/fm/%.fm,$(_fmtests)) \
     $(patsubst %,out/c/%.c,$(_ctests)) \
     $(patsubst %,out/java/aldorcode/%.java,$(_jtests)) \
     $(patsubst %,out/java/aldorcode/%.class,$(_jtests)) \
     $(patsubst %,out/java/aldorcode/%.class,$(_jruntests)) \
     $(patsubst %,%.o,$(_otests))  \
     $(patsubst %,%.exe,$(_xtests))

.PHONY: all

# 
# :: Automake requires this little lot
#
mostlyclean: 
	rm -rf $(builddir)/out
	rm -f $(patsubst %,%.o,$(otests))

clean: mostlyclean
distclean: clean 
	rm Makefile
maintainer-clean: distclean


EMPTY_AUTOMAKE_TARGETS  = dvi pdf ps info html tags ctags
EMPTY_AUTOMAKE_TARGETS += install install-data install-exec uninstall
EMPTY_AUTOMAKE_TARGETS += install-dvi install-html install-info install-ps install-pdf
EMPTY_AUTOMAKE_TARGETS += installdirs
EMPTY_AUTOMAKE_TARGETS += check installcheck

.PHONY: $(EMPTY_AUTOMAKE_TARGETS)
$(EMPTY_AUTOMAKE_TARGETS):
